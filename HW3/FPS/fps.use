model FPSPlayer

class Character
	attributes
		health : Integer init = 100
		enemiesNear : Integer init = 0
		currentState : PlayerState
		neutralState : Neutral
		attackState : Attack
		panicState : Panic
		deadState : Dead

	operations
		initInstance()
		begin
			self.currentState := self.neutralState;
		end
		
		subtractHealth(i: Integer)
		begin 
			self.currentState.subtractHealth(i);
		end

		regenHealth(i : Integer)
		begin
			self.currentState.regenHealth(i);
		end

		makeMove()
		begin
			self.currentState.makeMove();
		end

		detectEnemies()
		begin
			self.currentState.detectEnemies();
		end
	
		enemyGone()
		begin
			self.currentState.enemyGone();
		end

	statemachines
		psm StateMachine
			states
				startUp:initial

				Neutral	[currentState = neutralState]

				Attack	[currentState = attackState]

				Panic	[currentState = panicState]

				Dead	[currentState = deadState]

			transitions
				startUp -> Neutral	{create}

				Neutral -> Attack {[currentState = neutralState] detectEnemies() [ enemiesNear > 0]}

				Neutral -> Panic {[currentState = neutralState and ((self.health - i) <= 10) and (self.health - i) > 0] subtractHealth()}

				Neutral -> Dead { [currentState = neutralState and ((self.health - i) <= 0)] subtractHealth()}

				Neutral -> Neutral {[currentState = neutralState and ((self.health - i) > 10)] subtractHealth()}

				Neutral -> Neutral {[currentState = neutralState] regenHealth()}

				Neutral -> Neutral {[currentState = neutralState] enemyGone()}

				Attack -> Neutral { [currentState = attackState] enemyGone() [enemiesNear <= 0]}

				Attack -> Panic { [currentState = attackState and ((self.health - i) <= 10) and (self.health - i) > 0] subtractHealth() }

				Attack -> Dead { [currentState = attackState and ((self.health - i) <= 0)] subtractHealth()}

				Attack -> Attack {[currentState = attackState and ((self.health - i) > 10)] subtractHealth()}

				Attack -> Attack {[currentState = attackState] regenHealth()}

				Attack -> Attack {[currentState = attackState] detectEnemies()}

				Panic -> Neutral { [currentState = panicState and ((self.health + i) > 10) and enemiesNear <= 0] regenHealth()}

				Panic -> Attack { [currentState = panicState and ((self.health + i) > 10) and enemiesNear > 0] regenHealth()}

				Panic -> Dead { [currentState = panicState and ((self.health - i) <= 0)] subtractHealth()}

				Panic -> Panic {[currentState = panicState and ((self.health - i) > 0) and ((self.health - i) <= 10)] subtractHealth()}

				Panic -> Panic {[currentState = panicState and ((self.health + i) > 0) and ((self.health + i) <= 10)] regenHealth()}

				Panic -> Panic {[currentState = panicState] detectEnemies()}

				Panic -> Panic {[currentState = panicState] enemyGone()}

				Dead -> Dead {[currentState = deadState] regenHealth()}

				Dead -> Dead {[currentState = deadState] subtractHealth()}

				Dead -> Dead {[currentState = deadState] detectEnemies()}

				Dead -> Dead {[currentState = deadState] enemyGone()}
			end	
		end

class FPSPlayer < Character
end

class PlayerState
	operations
		subtractHealth(i: Integer)
		begin
		end

		regenHealth(i : Integer)
		begin
		end

		makeMove()
		begin
		end

		detectEnemies()
		begin
		end
	
		enemyGone()
		begin
		end
end

class Attack < PlayerState
	operations
		subtractHealth(i:Integer)
		begin
			self.pstate.health := self.pstate.health - i;
			if self.pstate.health <= 0 then
				self.pstate.currentState := self.pstate.deadState;
			else if self.pstate.health <= 10 then
				self.pstate.currentState := self.pstate.panicState;
			end;end;
		end
		
		regenHealth(i : Integer)
		begin
			self.pstate.health := self.pstate.health + i;
		end
		detectEnemies()
		begin
			WriteLine('You already see the enemy')
		end

		enemyGone()
		begin
			declare l : Location;
			self.pstate.enemiesNear := 0;
			self.pstate.currentState := self.pstate.neutralState;
		end
end

class Neutral < PlayerState
	operations
		subtractHealth(i:Integer)
		begin
			self.pstate.health := self.pstate.health - i;
			if self.pstate.health <= 0 then
				self.pstate.currentState := self.pstate.deadState;
			else if self.pstate.health <= 10 then
				self.pstate.currentState := self.pstate.panicState;
			end;end;
		end
		
		regenHealth(i : Integer)
		begin
			self.pstate.health := self.pstate.health + i;
		end

		detectEnemies()
		begin
			self.pstate.enemiesNear := 1;

			if self.pstate.health > 10 then
				self.pstate.currentState := self.pstate.attackState;
			else
				self.pstate.currentState := self.pstate.panicState;
			end;
		end

		enemyGone()
		begin
			WriteLine('There was no enemy to begin with');
		end
end

class Panic < PlayerState
	operations
		subtractHealth(i:Integer)
		begin
			self.pstate.health := self.pstate.health - i;
			if self.pstate.health <= 0 then
				self.pstate.currentState := self.pstate.deadState;
			end;
		end
		
		regenHealth(i : Integer)
		begin
			self.pstate.health := self.pstate.health + i;
			if self.pstate.health > 10 and self.pstate.enemiesNear <= 0 then
				self.pstate.currentState := self.pstate.neutralState;
			else if self.pstate.health > 10 and self.pstate.enemiesNear > 0 then
				self.pstate.currentState := self.pstate.attackState;
			end;end;
		end
		
		detectEnemies()
		begin
			self.pstate.enemiesNear := 1;
		end

		enemyGone()
		begin
			self.pstate.enemiesNear := 0;
		end
end


class Dead < PlayerState
	operations
		subtractHealth(i:Integer)
		begin
			WriteLine('Player is Dead');
		end
		
		regenHealth(i : Integer)
		begin
			WriteLine('Player is Dead');
		end

		detectEnemies()
		begin
			WriteLine('Player is Dead');
		end

		enemyGone()
		begin
			WriteLine('Player is Dead');
		end
end

class View
end

class Location
end

class Opponent < Character
end
class Level
end

association ViewLocations between
View[0] role bogus
Location[1] role locationInView
end

association playerState between 
PlayerState[*] role fpsState
Character [1] role pstate
end

association playerView between
Character[1] role playerViewing
View[1] role playersView
end

association locsInLevel between
Level[1] role map
Location[*] role locations
end

association characterLocation between
Character[0..1] role charOnLoc
Location[1] role charLocation
end
